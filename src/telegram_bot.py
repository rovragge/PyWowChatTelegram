import re

from telegram import Update
from telegram.ext import Application, ContextTypes, filters, MessageHandler, CommandHandler

from src.common.WowData import WowData
from src.common.commonclasses import Packet, ChatMessage
from src.common.config import glob
from src.database import Database


class TelegramBot:
    LINK_PATTERN = re.compile(
        r"\|c(?P<color>[0-9a-fA-F]{6,8})"  # –¶–≤–µ—Ç —Å—Å—ã–ª–∫–∏
        r"\|H(?P<type>\w+):"  # –¢–∏–ø —Å—Å—ã–ª–∫–∏
        r"(?P<id>\d+)"  # ID –æ–±—ä–µ–∫—Ç–∞
        r"(?::[0-9A-Fa-f:-]*)?"  # –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Å —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        r"\|h\[(?P<text>[^\]]+)\]"  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏
        r"\|h\|r"  # –ó–∞–≤–µ—Ä—à–∞—é—â–∞—è —á–∞—Å—Ç—å
    )

    def __init__(self, out_queue):
        self.out_queue = out_queue
        self.chat_id = glob.chat_id
        self.message_thread_id = glob.message_thread_id
        self.db = Database()
        self.application = Application.builder().token(glob.token).build()
        self.setup_handlers()

    def setup_handlers(self):
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ (–∏—Å–∫–ª—é—á–∞—è –∫–æ–º–∞–Ω–¥—ã)
        self.application.add_handler(MessageHandler(
            filters.Chat(chat_id=int(self.chat_id)) & filters.TEXT & ~filters.COMMAND,
            self.handle_tg_group_chat_message
        ))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        self.application.add_handler(CommandHandler("start", self.handle_start))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /online
        self.application.add_handler(CommandHandler("online", self.handle_online))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setnick <–ù–∏–∫>
        self.application.add_handler(CommandHandler("setnick", self.handle_setnick))

    async def start(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()

    async def handle_tg_group_chat_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_message is None:
            return
        if update.effective_message.message_thread_id != int(self.message_thread_id):
            return

        nickname = self.db.get_nickname(update.effective_user.id) or update.effective_user.username or update.effective_user.first_name
        full_message = f'<{nickname}> {update.effective_message.text}'

        max_length = 116
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª–∏–Ω–æ–π max_length —Å–∏–º–≤–æ–ª–æ–≤
        parts = [full_message[i:i + max_length] for i in range(0, len(full_message), max_length)]

        for part in parts:
            msg = ChatMessage()
            msg.channel = glob.codes.chat_channels.GUILD
            msg.text = part
            msg.language = glob.character.language
            packet_data = self.get_wow_chat_message(msg)
            await self.out_queue.put(Packet(glob.codes.client_headers.MESSAGECHAT, packet_data))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    async def handle_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        glob.logger.info(f"Handle /start command from {update.effective_user.username or update.effective_user.first_name}")
        message = (
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –≥–∏–ª—å–¥–∏–∏ –∏ –ø–µ—Ä–µ–Ω–æ—à—É —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–∂–¥—É WoW –∏ Telegram.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "üìå /online ‚Äî –∫—Ç–æ –≤ –∏–≥—Ä–µ —Å–µ–π—á–∞—Å\n"
            "üìå /setnick <–Ω–∏–∫> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫ –¥–ª—è —á–∞—Ç–∞\n\n"
            "–ü—Ä–∏–º–µ—Ä: /setnick –†–∞–≥–Ω–∞—Ä–æ—Å\n"
            "–ï—Å–ª–∏ –Ω–∏–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–º—è –∏–∑ Telegram."
        )
        await update.message.reply_text(message)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /online
    async def handle_online(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        glob.logger.info(f"Handle /online command from {update.effective_user.username or update.effective_user.first_name}")
        online_players = glob.guild.get_online_list()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω-–∏–≥—Ä–æ–∫–æ–≤
        if online_players:
            online_names = ", ".join(char.name for char in online_players)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ Character –≤ —Å—Ç—Ä–æ–∫—É
            response = f"–û–Ω–ª–∞–π–Ω —Å–µ–π—á–∞—Å ({len(online_players)} —á–µ–ª.): {online_names}"
        else:
            response = "–ù–∏–∫—Ç–æ –Ω–µ –≤ —Å–µ—Ç–∏ üò¢"
        await update.message.reply_text(response)

    async def handle_setnick(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        glob.logger.info(f"Handle /setnick command from {update.effective_user.username or update.effective_user.first_name}")
        if update.effective_message is None:
            return
        if not context.args:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setnick <–ù–∏–∫>")
            return

        # –°–æ–±–∏—Ä–∞–µ–º –Ω–∏–∫ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        new_nick = " ".join(context.args)
        tg_id = update.effective_user.id

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∏–∫ —á–µ—Ä–µ–∑ –Ω–∞—à –∫–ª–∞—Å—Å NicknameDB
        self.db.save_nickname(tg_id, new_nick)
        await update.message.reply_text(f"–ù–∏–∫ –¥–ª—è –∏–≥—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {new_nick}")

    async def handle_packet(self, packet):
        # –ü–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å DiscordBot –≤—ã–±–∏—Ä–∞–µ–º –∏–º—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–¥–∞ –ø–∞–∫–µ—Ç–∞
        handler_name = f'handle_{glob.codes.telegram_headers.get_str(packet.id)}'
        try:
            handler = getattr(self, handler_name)
        except AttributeError:
            glob.logger.error(f'Unhandled telegram header {packet.id}')
            return
        await handler(packet.data)

    async def handle_MESSAGE(self, data):
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞ GUILD
        if data.author.name is None:
            glob.logger.debug(f"Ignore SYSTEM message: {data.text}")
            return
        if data.channel != glob.codes.chat_channels.GUILD:
            glob.logger.debug(f"Ignore not GUILD message: {data.text}")
            return
        message_text = f"<{data.author.name}>: {self.parse_links(data.text)}"
        await self.application.bot.send_message(chat_id=self.chat_id,
                                                message_thread_id=self.message_thread_id,
                                                text=message_text,
                                                disable_notification=True)

    async def handle_ADD_CALENDAR_EVENT(self, data):
        glob.logger.info(f"ADD_CALENDAR_EVENT: {data}")

    async def handle_PURGE_CALENDAR(self, data):
        glob.logger.info(f"PURGE_CALENDAR: {data}")

    async def handle_ACTIVITY_UPDATE(self, data):
        pass

    async def handle_GUILD_EVENT(self, data):
        pass

    @staticmethod
    def parse_links(text):
        # –§—É–Ω–∫—Ü–∏—è-–∑–∞–º–µ–Ω–∏—Ç–µ–ª—å –¥–ª—è re.sub
        def repl(match):
            link_text = match.group("text")  # —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, "–ú–æ—è –ª—é–±–æ–≤—å –ø–æ–¥–æ–±–Ω–∞ –∞–ª–æ–π —Ä–æ–∑–µ"
            link_type = match.group("type")  # —Ç–∏–ø —Å—Å—ã–ª–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, "quest" –∏–ª–∏ "achievement"
            obj_id = match.group("id")  # ID –æ–±—ä–µ–∫—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, "1703"
            # –§–æ—Ä–º–∏—Ä—É–µ–º Markdown-—Å—Å—ã–ª–∫—É: [—Ç–µ–∫—Å—Ç](—Å—Å—ã–ª–∫–∞)
            return f'[{link_text}]({glob.db}?{link_type}={obj_id})'

        # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ —Å –ø–æ–º–æ—â—å—é re.sub
        return re.sub(TelegramBot.LINK_PATTERN, repl, text)

    @staticmethod
    def get_wow_chat_message(msg, targets=None):
        buff = WowData.allocate(8192)
        buff.put(msg.channel, 4, 'little')
        buff.put(msg.language, 4, 'little')
        if targets:
            for target in targets:
                buff.put(bytes(target, 'utf-8'))
                buff.put(0)
        buff.put(bytes(msg.text, 'utf-8'))
        buff.put(0)
        buff.strip()
        buff.rewind()
        return buff.array()
